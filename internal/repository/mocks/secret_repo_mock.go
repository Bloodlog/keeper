// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/secret_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "keeper/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVaultRepositoryInterface is a mock of VaultRepositoryInterface interface.
type MockVaultRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVaultRepositoryInterfaceMockRecorder
}

// MockVaultRepositoryInterfaceMockRecorder is the mock recorder for MockVaultRepositoryInterface.
type MockVaultRepositoryInterfaceMockRecorder struct {
	mock *MockVaultRepositoryInterface
}

// NewMockVaultRepositoryInterface creates a new mock instance.
func NewMockVaultRepositoryInterface(ctrl *gomock.Controller) *MockVaultRepositoryInterface {
	mock := &MockVaultRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockVaultRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVaultRepositoryInterface) EXPECT() *MockVaultRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockVaultRepositoryInterface) Delete(ctx context.Context, userID int64, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVaultRepositoryInterfaceMockRecorder) Delete(ctx, userID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVaultRepositoryInterface)(nil).Delete), ctx, userID, path)
}

// DeleteMetadata mocks base method.
func (m *MockVaultRepositoryInterface) DeleteMetadata(ctx context.Context, userID int64, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMetadata", ctx, userID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMetadata indicates an expected call of DeleteMetadata.
func (mr *MockVaultRepositoryInterfaceMockRecorder) DeleteMetadata(ctx, userID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetadata", reflect.TypeOf((*MockVaultRepositoryInterface)(nil).DeleteMetadata), ctx, userID, path)
}

// DestroySecret mocks base method.
func (m *MockVaultRepositoryInterface) DestroySecret(ctx context.Context, userID int64, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroySecret", ctx, userID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroySecret indicates an expected call of DestroySecret.
func (mr *MockVaultRepositoryInterfaceMockRecorder) DestroySecret(ctx, userID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroySecret", reflect.TypeOf((*MockVaultRepositoryInterface)(nil).DestroySecret), ctx, userID, path)
}

// GetByUserAndPath mocks base method.
func (m *MockVaultRepositoryInterface) GetByUserAndPath(ctx context.Context, userID int64, path string) (entity.OneSecretVersionWithMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserAndPath", ctx, userID, path)
	ret0, _ := ret[0].(entity.OneSecretVersionWithMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserAndPath indicates an expected call of GetByUserAndPath.
func (mr *MockVaultRepositoryInterfaceMockRecorder) GetByUserAndPath(ctx, userID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserAndPath", reflect.TypeOf((*MockVaultRepositoryInterface)(nil).GetByUserAndPath), ctx, userID, path)
}

// ListByUser mocks base method.
func (m *MockVaultRepositoryInterface) ListByUser(ctx context.Context, userID int64) ([]entity.SecretMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", ctx, userID)
	ret0, _ := ret[0].([]entity.SecretMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockVaultRepositoryInterfaceMockRecorder) ListByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockVaultRepositoryInterface)(nil).ListByUser), ctx, userID)
}

// SaveOrUpdate mocks base method.
func (m *MockVaultRepositoryInterface) SaveOrUpdate(ctx context.Context, secretMetadata *entity.SecretMetadata, secretVersion *entity.SecretVersion) (entity.SecretMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdate", ctx, secretMetadata, secretVersion)
	ret0, _ := ret[0].(entity.SecretMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveOrUpdate indicates an expected call of SaveOrUpdate.
func (mr *MockVaultRepositoryInterfaceMockRecorder) SaveOrUpdate(ctx, secretMetadata, secretVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdate", reflect.TypeOf((*MockVaultRepositoryInterface)(nil).SaveOrUpdate), ctx, secretMetadata, secretVersion)
}

// UndeleteSecret mocks base method.
func (m *MockVaultRepositoryInterface) UndeleteSecret(ctx context.Context, userID int64, path string, version int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndeleteSecret", ctx, userID, path, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// UndeleteSecret indicates an expected call of UndeleteSecret.
func (mr *MockVaultRepositoryInterfaceMockRecorder) UndeleteSecret(ctx, userID, path, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndeleteSecret", reflect.TypeOf((*MockVaultRepositoryInterface)(nil).UndeleteSecret), ctx, userID, path, version)
}
