// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: service.proto

package v1

import (
	context "context"
	model "keeper/internal/proto/v1/model"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_Register_FullMethodName = "/keeper.go.grpc.v1.AuthService/Register"
	AuthService_Login_FullMethodName    = "/keeper.go.grpc.v1.AuthService/Login"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Register(ctx context.Context, in *model.RegisterRequest, opts ...grpc.CallOption) (*model.RegisterResponse, error)
	Login(ctx context.Context, in *model.LoginRequest, opts ...grpc.CallOption) (*model.LoginResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Register(ctx context.Context, in *model.RegisterRequest, opts ...grpc.CallOption) (*model.RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.RegisterResponse)
	err := c.cc.Invoke(ctx, AuthService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Login(ctx context.Context, in *model.LoginRequest, opts ...grpc.CallOption) (*model.LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.LoginResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	Register(context.Context, *model.RegisterRequest) (*model.RegisterResponse, error)
	Login(context.Context, *model.LoginRequest) (*model.LoginResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) Register(context.Context, *model.RegisterRequest) (*model.RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthServiceServer) Login(context.Context, *model.LoginRequest) (*model.LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Register(ctx, req.(*model.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*model.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keeper.go.grpc.v1.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	DataService_GetSecret_FullMethodName      = "/keeper.go.grpc.v1.DataService/GetSecret"
	DataService_ListSecrets_FullMethodName    = "/keeper.go.grpc.v1.DataService/ListSecrets"
	DataService_SaveSecret_FullMethodName     = "/keeper.go.grpc.v1.DataService/SaveSecret"
	DataService_DeleteSecret_FullMethodName   = "/keeper.go.grpc.v1.DataService/DeleteSecret"
	DataService_DestroySecret_FullMethodName  = "/keeper.go.grpc.v1.DataService/DestroySecret"
	DataService_DeleteMetadata_FullMethodName = "/keeper.go.grpc.v1.DataService/DeleteMetadata"
	DataService_UndeleteSecret_FullMethodName = "/keeper.go.grpc.v1.DataService/UndeleteSecret"
)

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	GetSecret(ctx context.Context, in *model.GetSecretRequest, opts ...grpc.CallOption) (*model.SecretResponse, error)
	ListSecrets(ctx context.Context, in *model.ListSecretPathsRequest, opts ...grpc.CallOption) (*model.ListSecretPathsResponse, error)
	SaveSecret(ctx context.Context, in *model.WriteSecret, opts ...grpc.CallOption) (*model.SaveSecretResponse, error)
	DeleteSecret(ctx context.Context, in *model.DeleteSecretRequest, opts ...grpc.CallOption) (*model.DeleteSecretResponse, error)
	DestroySecret(ctx context.Context, in *model.DeleteSecretRequest, opts ...grpc.CallOption) (*model.DeleteSecretResponse, error)
	DeleteMetadata(ctx context.Context, in *model.DeleteSecretRequest, opts ...grpc.CallOption) (*model.DeleteSecretResponse, error)
	UndeleteSecret(ctx context.Context, in *model.UndeleteSecretRequest, opts ...grpc.CallOption) (*model.DeleteSecretResponse, error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) GetSecret(ctx context.Context, in *model.GetSecretRequest, opts ...grpc.CallOption) (*model.SecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.SecretResponse)
	err := c.cc.Invoke(ctx, DataService_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) ListSecrets(ctx context.Context, in *model.ListSecretPathsRequest, opts ...grpc.CallOption) (*model.ListSecretPathsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.ListSecretPathsResponse)
	err := c.cc.Invoke(ctx, DataService_ListSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) SaveSecret(ctx context.Context, in *model.WriteSecret, opts ...grpc.CallOption) (*model.SaveSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.SaveSecretResponse)
	err := c.cc.Invoke(ctx, DataService_SaveSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteSecret(ctx context.Context, in *model.DeleteSecretRequest, opts ...grpc.CallOption) (*model.DeleteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.DeleteSecretResponse)
	err := c.cc.Invoke(ctx, DataService_DeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DestroySecret(ctx context.Context, in *model.DeleteSecretRequest, opts ...grpc.CallOption) (*model.DeleteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.DeleteSecretResponse)
	err := c.cc.Invoke(ctx, DataService_DestroySecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) DeleteMetadata(ctx context.Context, in *model.DeleteSecretRequest, opts ...grpc.CallOption) (*model.DeleteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.DeleteSecretResponse)
	err := c.cc.Invoke(ctx, DataService_DeleteMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) UndeleteSecret(ctx context.Context, in *model.UndeleteSecretRequest, opts ...grpc.CallOption) (*model.DeleteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(model.DeleteSecretResponse)
	err := c.cc.Invoke(ctx, DataService_UndeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility.
type DataServiceServer interface {
	GetSecret(context.Context, *model.GetSecretRequest) (*model.SecretResponse, error)
	ListSecrets(context.Context, *model.ListSecretPathsRequest) (*model.ListSecretPathsResponse, error)
	SaveSecret(context.Context, *model.WriteSecret) (*model.SaveSecretResponse, error)
	DeleteSecret(context.Context, *model.DeleteSecretRequest) (*model.DeleteSecretResponse, error)
	DestroySecret(context.Context, *model.DeleteSecretRequest) (*model.DeleteSecretResponse, error)
	DeleteMetadata(context.Context, *model.DeleteSecretRequest) (*model.DeleteSecretResponse, error)
	UndeleteSecret(context.Context, *model.UndeleteSecretRequest) (*model.DeleteSecretResponse, error)
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServiceServer struct{}

func (UnimplementedDataServiceServer) GetSecret(context.Context, *model.GetSecretRequest) (*model.SecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedDataServiceServer) ListSecrets(context.Context, *model.ListSecretPathsRequest) (*model.ListSecretPathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSecrets not implemented")
}
func (UnimplementedDataServiceServer) SaveSecret(context.Context, *model.WriteSecret) (*model.SaveSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSecret not implemented")
}
func (UnimplementedDataServiceServer) DeleteSecret(context.Context, *model.DeleteSecretRequest) (*model.DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedDataServiceServer) DestroySecret(context.Context, *model.DeleteSecretRequest) (*model.DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroySecret not implemented")
}
func (UnimplementedDataServiceServer) DeleteMetadata(context.Context, *model.DeleteSecretRequest) (*model.DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetadata not implemented")
}
func (UnimplementedDataServiceServer) UndeleteSecret(context.Context, *model.UndeleteSecretRequest) (*model.DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteSecret not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}
func (UnimplementedDataServiceServer) testEmbeddedByValue()                     {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).GetSecret(ctx, req.(*model.GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ListSecretPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_ListSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).ListSecrets(ctx, req.(*model.ListSecretPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_SaveSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.WriteSecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).SaveSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_SaveSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).SaveSecret(ctx, req.(*model.WriteSecret))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteSecret(ctx, req.(*model.DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DestroySecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DestroySecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DestroySecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DestroySecret(ctx, req.(*model.DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_DeleteMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).DeleteMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_DeleteMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).DeleteMetadata(ctx, req.(*model.DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_UndeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.UndeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).UndeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_UndeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).UndeleteSecret(ctx, req.(*model.UndeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keeper.go.grpc.v1.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSecret",
			Handler:    _DataService_GetSecret_Handler,
		},
		{
			MethodName: "ListSecrets",
			Handler:    _DataService_ListSecrets_Handler,
		},
		{
			MethodName: "SaveSecret",
			Handler:    _DataService_SaveSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _DataService_DeleteSecret_Handler,
		},
		{
			MethodName: "DestroySecret",
			Handler:    _DataService_DestroySecret_Handler,
		},
		{
			MethodName: "DeleteMetadata",
			Handler:    _DataService_DeleteMetadata_Handler,
		},
		{
			MethodName: "UndeleteSecret",
			Handler:    _DataService_UndeleteSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
